import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
import sqlite3
from datetime import datetime


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
with open('token.txt') as file:
    TOKEN = file.readline()
    
GROUP_CHAT_ID = -4802024453  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -)

ADMIN_IDS = [1007591028]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤–º

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTER_NAME, MODERATION = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('data/bot_db.sqlite')
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (user_id INTEGER PRIMARY KEY,
                       username TEXT,
                       full_name TEXT,
                       registration_date TEXT,
                       is_approved INTEGER DEFAULT 0,
                       points INTEGER DEFAULT 0)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS photos
                      (photo_id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER,
                       file_id TEXT,
                       sent_date TEXT,
                       status TEXT DEFAULT 'pending',
                       moderator_id INTEGER,
                       decision_date TEXT)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS transactions
                      (transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER,
                       amount INTEGER,
                       admin_id INTEGER,
                       date TEXT,
                       reason TEXT)''')
    
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def add_user(user_id, username, full_name):
    conn = sqlite3.connect('data/bot_db.sqlite')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, full_name, registration_date) VALUES (?, ?, ?, ?)",
                   (user_id, username, full_name, datetime.now().isoformat()))
    conn.commit()
    conn.close()

def approve_user(user_id, admin_id):
    conn = sqlite3.connect('data/bot_db.sqlite')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET is_approved = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"

def add_points(user_id, amount, admin_id=None, reason=""):
    conn = sqlite3.connect('data/bot_db.sqlite')
    cursor = conn.cursor()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã
    cursor.execute("UPDATE users SET points = points + ? WHERE user_id = ?", (amount, user_id))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    if admin_id:
        cursor.execute("INSERT INTO transactions (user_id, amount, admin_id, date, reason) VALUES (?, ?, ?, ?, ?)",
                      (user_id, amount, admin_id, datetime.now().isoformat(), reason))
    
    conn.commit()
    conn.close()

def get_user_info(user_id):
    conn = sqlite3.connect('data/bot_db.sqlite')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username, full_name, is_approved, points FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result

def get_user_transactions(user_id, limit=5):
    conn = sqlite3.connect('data/bot_db.sqlite')
    cursor = conn.cursor()
    cursor.execute('''SELECT t.date, t.amount, t.reason, u.username 
                      FROM transactions t
                      LEFT JOIN users u ON t.admin_id = u.user_id
                      WHERE t.user_id = ?
                      ORDER BY t.date DESC
                      LIMIT ?''', (user_id, limit))
    result = cursor.fetchall()
    conn.close()
    return result

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_info = get_user_info(user.id)
    
    if user_info is None:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û (–ø–æ–ª–Ω–æ–µ –∏–º—è) –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return REGISTER_NAME
    elif user_info[3] == 0:
        await update.message.reply_text(
            "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
    else:
        await show_profile(update, context)
    return ConversationHandler.END

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_info = get_user_info(user.id)
    transactions = get_user_transactions(user.id)
    
    if not user_info:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    message = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üÜî ID: {user_info[0]}\n"
        f"üìõ –§–ò–û: {user_info[2]}\n"
        f"‚≠ê –ë–∞–ª–ª—ã: {user_info[4]}\n\n"
        f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
    )
    
    for trans in transactions:
        admin = f"@{trans[3]}" if trans[3] else "—Å–∏—Å—Ç–µ–º–∞"
        message += f"{trans[0][:10]}: {'+' if trans[1] > 0 else ''}{trans[1]} –±–∞–ª–ª–æ–≤ ({admin})"
        if trans[2]:
            message += f" - {trans[2]}\n"
        else:
            message += "\n"
    
    await update.message.reply_text(message)

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    full_name = update.message.text
    
    conn = sqlite3.connect('data/bot_db.sqlite')
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, username, full_name, registration_date, is_approved) VALUES (?, ?, ?, ?, 0)",
                  (user.id, user.username, full_name, datetime.now().isoformat()))
    conn.commit()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_user_{user.id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_user_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id= -4802024453,
        text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:\n"
             f"ID: {user.id}\n"
             f"Username: @{user.username}\n"
             f"–§–ò–û: {full_name}",
        reply_markup=reply_markup
    )
    
    await update.message.reply_text("–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç.")
    return ConversationHandler.END

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_info = get_user_info(user.id)
    
    if not user_info or user_info[3] == 0:
        await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return
    
    try:
        photo = update.message.photo[-1]
        
        conn = sqlite3.connect('data/bot_db.sqlite')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO photos (user_id, file_id, sent_date) VALUES (?, ?, ?)",
                      (user.id, photo.file_id, datetime.now().isoformat()))
        photo_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (+1 –±–∞–ª–ª)", callback_data=f"approve_photo_{photo_id}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_photo_{photo_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_photo(
            chat_id= -4802024453,
            photo=photo.file_id,
            caption=f"–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.username}\n"
                   f"ID: {user.id}\n"
                   f"–§–ò–û: {user_info[2]}\n"
                   f"–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: {user_info[4]}",
            reply_markup=reply_markup
        )
        
        await update.message.reply_text("–í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –±–∞–ª–ª.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ.")

async def remove_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_points <user_id> <amount> [reason]")
        return
    
    try:
        target_user_id = int(context.args[0])
        amount = int(context.args[1])
        reason = " ".join(context.args[2:]) if len(context.args) > 2 else "–°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã (–ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        add_points(target_user_id, -amount, update.effective_user.id, reason)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = get_user_info(target_user_id)
        
        await update.message.reply_text(
            f"–°–ø–∏—Å–∞–Ω–æ {amount} –±–∞–ª–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_info[1]} (ID: {target_user_id})\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_info[4]}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª —É –≤–∞—Å {amount} –±–∞–ª–ª–æ–≤.\n"
                 f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                 f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_info[4]}"
        )
        
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. user_id –∏ amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    admin_id = query.from_user.id
    
    if admin_id not in ADMIN_IDS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    try:
        if data.startswith("approve_user_"):
            target_user_id = int(data.split("_")[2])
            approve_user(target_user_id, admin_id)
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")
            await context.bot.send_message(
                chat_id=target_user_id,
                text="‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã."
            )
            await query.edit_message_text(
                text=f"{query.message.text}\n\n–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{query.from_user.username}"
            )
        
        elif data.startswith("reject_user_"):
            target_user_id = int(data.split("_")[2])
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            await context.bot.send_message(
                chat_id=target_user_id,
                text="‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await query.edit_message_text(
                text=f"{query.message.text}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{query.from_user.username}"
            )
        
        elif data.startswith("approve_photo_"):
            photo_id = int(data.split("_")[2])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
            conn = sqlite3.connect('data/bot_db.sqlite')
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM photos WHERE photo_id = ?", (photo_id,))
            user_id = cursor.fetchone()[0]
            conn.close()
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
            add_points(user_id, 1, admin_id, "–û–¥–æ–±—Ä–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ
            conn = sqlite3.connect('data/bot_db.sqlite')
            cursor = conn.cursor()
            cursor.execute("UPDATE photos SET status = 'approved', moderator_id = ?, decision_date = ? WHERE photo_id = ?",
                          (admin_id, datetime.now().isoformat(), photo_id))
            conn.commit()
            conn.close()
            
            await query.answer("–§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ (+1 –±–∞–ª–ª)")
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –±–∞–ª–ª.\n–ù–∞–ø–∏—à–∏—Ç–µ /profile, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–∞–ª–ª–∞—Ö."
            )
            await query.edit_message_caption(
                caption=f"{query.message.caption}\n\n–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{query.from_user.username}\n+1 –±–∞–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )
        
        elif data.startswith("reject_photo_"):
            photo_id = int(data.split("_")[2])
            
            conn = sqlite3.connect('data/bot_db.sqlite')
            cursor = conn.cursor()
            cursor.execute("UPDATE photos SET status = 'rejected', moderator_id = ?, decision_date = ? WHERE photo_id = ?",
                          (admin_id, datetime.now().isoformat(), photo_id))
            cursor.execute("SELECT user_id FROM photos WHERE photo_id = ?", (photo_id,))
            user_id = cursor.fetchone()[0]
            conn.commit()
            conn.close()
            
            await query.answer("–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await query.edit_message_caption(
                caption=f"{query.message.caption}\n\n–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{query.from_user.username}"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('profile', show_profile))
    application.add_handler(CommandHandler('remove_points', remove_points))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    application.run_polling()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

if __name__ == "__main__":
    main()